Time complexity=O(n)
Space complexity=O(1)

// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


// Function to find subarray with maximum sum
// arr: input array
// n: size of array
int maxSubarraySum(int vec[], int n){
    
    // Your code here
    int cs=vec[0],ms=vec[0];
	int si=0,msi=0;
	
	for(int i=1;i<n;i++){
		if(vec[i]>vec[i]+cs){
			//vec[i]=15,cs=-13
			cs=vec[i];
		}
		else{
			cs=vec[i]+cs;
			
		}
		if(cs>=ms){
			ms=cs;
			msi=si;
		}
		ms=max(cs,ms);
	}
	return ms;
    
}

// { Driver Code Starts.

int main()
{
    int t,n;
    
    cin>>t; //input testcases
    while(t--) //while testcases exist
    {
        
        cin>>n; //input size of array
        
        int a[n];
        
        for(int i=0;i<n;i++)
            cin>>a[i]; //inputting elements of array
        
        cout << maxSubarraySum(a, n) << endl;
    }
}
  // } Driver Code Ends

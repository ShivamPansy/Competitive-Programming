The approach to this problem is applying xor between index and the array. The xor of number to itself will be zero and the missing number will be returned as answer.

Time complexity=O(n)
Space complexity=O(1)

// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

int MissingNumber(vector<int>& array, int n);

// Position this line where user code will be pasted.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;

        vector<int> array(n - 1);
        for (int i = 0; i < n - 1; ++i) cin >> array[i];

        cout << MissingNumber(array, n) << "\n";
    }
    return 0;
}// } Driver Code Ends


// User function template for C++

int MissingNumber(vector<int>& array, int n) {
    // Your code goes here
    int missing=0;
    for(int i=0;i<array.size();i++){
        missing=missing^(i+1)^(array[i]);
    }
    return missing^(n);
    
}
